!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASM	./Makefile	/^ASM		= nasm$/;"	m
ASMBFLAGS	./Makefile	/^ASMBFLAGS	= -I boot\/include\/$/;"	m
ASMKFLAGS	./Makefile	/^ASMKFLAGS	= -I include\/ -f elf$/;"	m
CC	./Makefile	/^CC		= gcc$/;"	m
CFLAGS	./Makefile	/^CFLAGS		= -I include\/ -c -fno-builtin$/;"	m
DASM	./Makefile	/^DASM		= ndisasm$/;"	m
DASMFLAGS	./Makefile	/^DASMFLAGS	= -u -o $(ENTRYPOINT) -e $(ENTRYOFFSET)$/;"	m
DASMOUTPUT	./Makefile	/^DASMOUTPUT	= kernel.bin.asm$/;"	m
DA_32	./protect.h	55;"	d
DA_386CGate	./protect.h	73;"	d
DA_386IGate	./protect.h	74;"	d
DA_386TGate	./protect.h	75;"	d
DA_386TSS	./protect.h	72;"	d
DA_C	./protect.h	65;"	d
DA_CCO	./protect.h	67;"	d
DA_CCOR	./protect.h	68;"	d
DA_CR	./protect.h	66;"	d
DA_DPL0	./protect.h	57;"	d
DA_DPL1	./protect.h	58;"	d
DA_DPL2	./protect.h	59;"	d
DA_DPL3	./protect.h	60;"	d
DA_DR	./protect.h	62;"	d
DA_DRW	./protect.h	63;"	d
DA_DRWA	./protect.h	64;"	d
DA_LDT	./protect.h	70;"	d
DA_LIMIT_4K	./protect.h	56;"	d
DA_TaskGate	./protect.h	71;"	d
DESCRIPTOR	./protect.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:s_descriptor
ENTRYOFFSET	./Makefile	/^ENTRYOFFSET	=   0x400$/;"	m
ENTRYPOINT	./Makefile	/^ENTRYPOINT	= 0x30400$/;"	m
EXTERN	./const.h	13;"	d
EXTERN	./global.h	10;"	d
EXTERN	./global.h	11;"	d
GATE	./protect.h	/^}GATE;$/;"	t	typeref:struct:s_gate
GDT_SIZE	./const.h	20;"	d
GLOBAL_VARIABLES_HERE	./global.c	8;"	d	file:
IDT_SIZE	./const.h	21;"	d
INDEX_DUMMY	./protect.h	40;"	d
INDEX_FLAT_C	./protect.h	41;"	d
INDEX_FLAT_RW	./protect.h	42;"	d
INDEX_VIDEO	./protect.h	43;"	d
INT_M_CTL	./const.h	29;"	d
INT_M_CTLMASK	./const.h	30;"	d
INT_S_CTL	./const.h	31;"	d
INT_S_CTLMASK	./const.h	32;"	d
INT_VECTOR_BOUNDS	./protect.h	83;"	d
INT_VECTOR_BREAKPOINT	./protect.h	81;"	d
INT_VECTOR_COPROC_ERR	./protect.h	93;"	d
INT_VECTOR_COPROC_NOT	./protect.h	85;"	d
INT_VECTOR_COPROC_SEG	./protect.h	87;"	d
INT_VECTOR_DEBUG	./protect.h	79;"	d
INT_VECTOR_DIVIDE	./protect.h	78;"	d
INT_VECTOR_DOUBLE_FAULT	./protect.h	86;"	d
INT_VECTOR_INVAL_OP	./protect.h	84;"	d
INT_VECTOR_INVAL_TSS	./protect.h	88;"	d
INT_VECTOR_IRQ0	./protect.h	96;"	d
INT_VECTOR_IRQ8	./protect.h	97;"	d
INT_VECTOR_NMI	./protect.h	80;"	d
INT_VECTOR_OVERFLOW	./protect.h	82;"	d
INT_VECTOR_PAGE_FAULT	./protect.h	92;"	d
INT_VECTOR_PROTECTION	./protect.h	91;"	d
INT_VECTOR_SEG_NOT	./protect.h	89;"	d
INT_VECTOR_STACK_FAULT	./protect.h	90;"	d
LD	./Makefile	/^LD		= ld$/;"	m
LDFLAGS	./Makefile	/^LDFLAGS		= -s -Ttext $(ENTRYPOINT)$/;"	m
OBJS	./Makefile	/^OBJS		= kernel\/kernel.o kernel\/start.o kernel\/i8259.o kernel\/global.o kernel\/protect.o lib\/klib.o lib\/kliba.o lib\/string.o$/;"	m
ORANGESBOOT	./Makefile	/^ORANGESBOOT	= boot\/boot.bin boot\/loader.bin$/;"	m
ORANGESKERNEL	./Makefile	/^ORANGESKERNEL	= kernel.bin$/;"	m
PRIVATE	./const.h	17;"	d
PRIVILEGE_KRNL	./const.h	24;"	d
PRIVILEGE_TASK	./const.h	25;"	d
PRIVILEGE_USER	./const.h	26;"	d
PUBLIC	./const.h	16;"	d
SELECTOR_DUMMY	./protect.h	45;"	d
SELECTOR_FLAT_C	./protect.h	46;"	d
SELECTOR_FLAT_RW	./protect.h	47;"	d
SELECTOR_KERNEL_CS	./kernel.asm	/^SELECTOR_KERNEL_CS	equ	8$/;"	d
SELECTOR_KERNEL_CS	./protect.h	50;"	d
SELECTOR_KERNEL_DS	./protect.h	51;"	d
SELECTOR_VIDEO	./protect.h	48;"	d
StackSpace	./kernel.asm	/^StackSpace		resb	2 * 1024$/;"	l
StackTop	./kernel.asm	/^StackTop:		; 栈顶$/;"	l
_ORANGES_CONST_H_	./const.h	9;"	d
_ORANGES_PROTECT_H_	./protect.h	9;"	d
_ORANGES_TYPE_H_	./type.h	9;"	d
_start	./kernel.asm	/^_start:$/;"	l
attr	./protect.h	/^	u8	attr;		\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:s_gate
attr1	./protect.h	/^	u8	attr1;			\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:s_descriptor
base_high	./protect.h	/^	u8	base_high;		\/* Base *\/$/;"	m	struct:s_descriptor
base_low	./protect.h	/^	u16	base_low;		\/* Base *\/$/;"	m	struct:s_descriptor
base_mid	./protect.h	/^	u8	base_mid;		\/* Base *\/$/;"	m	struct:s_descriptor
bounds_check	./kernel.asm	/^bounds_check:$/;"	l
breakpoint_exception	./kernel.asm	/^breakpoint_exception:$/;"	l
copr_error	./kernel.asm	/^copr_error:$/;"	l
copr_not_available	./kernel.asm	/^copr_not_available:$/;"	l
copr_seg_overrun	./kernel.asm	/^copr_seg_overrun:$/;"	l
csinit	./kernel.asm	/^csinit:$/;"	l
cstart	./start.c	/^PUBLIC void cstart()$/;"	f
dcount	./protect.h	/^	u8	dcount;		\/* 该字段只在调用门描述符中有效。如果在利用$/;"	m	struct:s_gate
disp_color_str	./kliba.asm	/^disp_color_str:$/;"	l
disp_int	./klib.c	/^PUBLIC void disp_int(int input)$/;"	f
disp_pos	./global.h	/^EXTERN	int		disp_pos;$/;"	v
disp_str	./kliba.asm	/^disp_str:$/;"	l
divide_error	./kernel.asm	/^divide_error:$/;"	l
double_fault	./kernel.asm	/^double_fault:$/;"	l
exception	./kernel.asm	/^exception:$/;"	l
exception_handler	./protect.c	/^PUBLIC void exception_handler(int vec_no,int err_code,int eip,int cs,int eflags)$/;"	f
extern	./kernel.asm	/^extern	cstart$/;"	l
extern	./kernel.asm	/^extern	disp_pos$/;"	l
extern	./kernel.asm	/^extern	exception_handler$/;"	l
extern	./kernel.asm	/^extern	gdt_ptr$/;"	l
extern	./kernel.asm	/^extern	idt_ptr$/;"	l
extern	./kernel.asm	/^extern	spurious_irq$/;"	l
extern	./kliba.asm	/^extern	disp_pos$/;"	l
gdt	./global.h	/^EXTERN	DESCRIPTOR	gdt[GDT_SIZE];$/;"	v
gdt_ptr	./global.h	/^EXTERN	u8		gdt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v
general_protection	./kernel.asm	/^general_protection:$/;"	l
global	./kernel.asm	/^global	bounds_check$/;"	l
global	./kernel.asm	/^global	breakpoint_exception$/;"	l
global	./kernel.asm	/^global	copr_error$/;"	l
global	./kernel.asm	/^global	copr_not_available$/;"	l
global	./kernel.asm	/^global	copr_seg_overrun$/;"	l
global	./kernel.asm	/^global	divide_error$/;"	l
global	./kernel.asm	/^global	double_fault$/;"	l
global	./kernel.asm	/^global	general_protection$/;"	l
global	./kernel.asm	/^global	inval_opcode$/;"	l
global	./kernel.asm	/^global	inval_tss$/;"	l
global	./kernel.asm	/^global	nmi$/;"	l
global	./kernel.asm	/^global	overflow$/;"	l
global	./kernel.asm	/^global	page_fault$/;"	l
global	./kernel.asm	/^global	segment_not_present$/;"	l
global	./kernel.asm	/^global	single_step_exception$/;"	l
global	./kernel.asm	/^global	stack_exception$/;"	l
global	./kernel.asm	/^global  hwint00$/;"	l
global	./kernel.asm	/^global  hwint01$/;"	l
global	./kernel.asm	/^global  hwint02$/;"	l
global	./kernel.asm	/^global  hwint03$/;"	l
global	./kernel.asm	/^global  hwint04$/;"	l
global	./kernel.asm	/^global  hwint05$/;"	l
global	./kernel.asm	/^global  hwint06$/;"	l
global	./kernel.asm	/^global  hwint07$/;"	l
global	./kernel.asm	/^global  hwint08$/;"	l
global	./kernel.asm	/^global  hwint09$/;"	l
global	./kernel.asm	/^global  hwint10$/;"	l
global	./kernel.asm	/^global  hwint11$/;"	l
global	./kernel.asm	/^global  hwint12$/;"	l
global	./kernel.asm	/^global  hwint13$/;"	l
global	./kernel.asm	/^global  hwint14$/;"	l
global	./kernel.asm	/^global  hwint15$/;"	l
global	./kernel.asm	/^global _start	; 导出 _start$/;"	l
global	./kliba.asm	/^global	disp_color_str$/;"	l
global	./kliba.asm	/^global	disp_str$/;"	l
global	./kliba.asm	/^global	in_byte$/;"	l
global	./kliba.asm	/^global	out_byte$/;"	l
global	./string.asm	/^global	memcpy$/;"	l
hwint00	./kernel.asm	/^hwint00:                ; Interrupt routine for irq 0 (the clock).$/;"	l
hwint01	./kernel.asm	/^hwint01:                ; Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	./kernel.asm	/^hwint02:                ; Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	./kernel.asm	/^hwint03:                ; Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	./kernel.asm	/^hwint04:                ; Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	./kernel.asm	/^hwint05:                ; Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	./kernel.asm	/^hwint06:                ; Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	./kernel.asm	/^hwint07:                ; Interrupt routine for irq 7 (printer)$/;"	l
hwint08	./kernel.asm	/^hwint08:                ; Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	./kernel.asm	/^hwint09:                ; Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	./kernel.asm	/^hwint10:                ; Interrupt routine for irq 10$/;"	l
hwint11	./kernel.asm	/^hwint11:                ; Interrupt routine for irq 11$/;"	l
hwint12	./kernel.asm	/^hwint12:                ; Interrupt routine for irq 12$/;"	l
hwint13	./kernel.asm	/^hwint13:                ; Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	./kernel.asm	/^hwint14:                ; Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	./kernel.asm	/^hwint15:                ; Interrupt routine for irq 15$/;"	l
idt	./global.h	/^EXTERN	GATE		idt[IDT_SIZE];$/;"	v
idt_ptr	./global.h	/^EXTERN	u8		idt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v
in_byte	./kliba.asm	/^in_byte:$/;"	l
init_8259A	./i8259.c	/^PUBLIC void init_8259A()$/;"	f
init_idt_desc	./protect.c	/^PRIVATE void init_idt_desc(unsigned char vector, u8 desc_type,$/;"	f
init_prot	./protect.c	/^PUBLIC void init_prot()$/;"	f
int_handler	./type.h	/^typedef	void	(*int_handler)	();$/;"	t
inval_opcode	./kernel.asm	/^inval_opcode:$/;"	l
inval_tss	./kernel.asm	/^inval_tss:$/;"	l
itoa	./klib.c	/^PUBLIC char * itoa(char * str, int num)$/;"	f
limit_high_attr2	./protect.h	/^	u8	limit_high_attr2;	\/* G(1) D(1) 0(1) AVL(1) LimitHigh(4) *\/$/;"	m	struct:s_descriptor
limit_low	./protect.h	/^	u16	limit_low;		\/* Limit *\/$/;"	m	struct:s_descriptor
memcpy	./string.asm	/^memcpy:$/;"	l
nmi	./kernel.asm	/^nmi:$/;"	l
offset_high	./protect.h	/^	u16	offset_high;	\/* Offset High *\/$/;"	m	struct:s_gate
offset_low	./protect.h	/^	u16	offset_low;	\/* Offset Low *\/$/;"	m	struct:s_gate
out_byte	./kliba.asm	/^out_byte:$/;"	l
overflow	./kernel.asm	/^overflow:$/;"	l
page_fault	./kernel.asm	/^page_fault:$/;"	l
s_descriptor	./protect.h	/^typedef struct s_descriptor		\/* 共 8 个字节 *\/$/;"	s
s_gate	./protect.h	/^typedef struct s_gate$/;"	s
segment_not_present	./kernel.asm	/^segment_not_present:$/;"	l
selector	./protect.h	/^	u16	selector;	\/* Selector *\/$/;"	m	struct:s_gate
single_step_exception	./kernel.asm	/^single_step_exception:$/;"	l
spurious_irq	./i8259.c	/^PUBLIC void spurious_irq(int irq)$/;"	f
stack_exception	./kernel.asm	/^stack_exception:$/;"	l
u16	./type.h	/^typedef	unsigned short		u16;$/;"	t
u32	./type.h	/^typedef	unsigned int		u32;$/;"	t
u8	./type.h	/^typedef	unsigned char		u8;$/;"	t
