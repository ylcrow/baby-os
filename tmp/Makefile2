############################################################################
#
# Makefile -- Top level uClinux makefile.
#
# Copyright (c) 2001-2004, SnapGear (www.snapgear.com)
# Copyright (c) 2001, Lineo
#

VERSIONPKG = 3.2.0
VERSIONSTR = $(CONFIG_VENDOR)/$(CONFIG_PRODUCT) Version $(VERSIONPKG)

############################################################################
#
# Lets work out what the user wants, and if they have configured us yet
#

ifeq (.config,$(wildcard .config))
include .config
# If we need build toolchain, build it only.
ifeq ($(CONFIG_BUILD_TOOLCHAIN), y)
export CONFIG_TOOLCHAIN_PATH
all: toolchain
else
all: dep uClibc++_only lib_only modules linux user_only romfs image upgrade Uboot flashall md5file

endif

else
all: config_error
endif

############################################################################
#
# Get the core stuff worked out
#

LINUXDIR = $(CONFIG_LINUXDIR)
LIBCDIR  = $(CONFIG_LIBCDIR)
ROOTDIR  = $(shell pwd)
PATH	 := $(PATH):$(ROOTDIR)/tools
HOSTCC   = cc
IMAGEDIR = $(ROOTDIR)/images
ifneq ($(strip $(HW)),)
IMAGEDIR = $(ROOTDIR)/images/$(HW)
endif
ifneq ($(strip $(OEM)),)
IMAGEDIR = $(ROOTDIR)/images/$(OEM)
endif
ifneq ($(strip $(HW)),)
ifneq ($(strip $(OEM)),)
IMAGEDIR = $(ROOTDIR)/images/$(HW)_$(OEM)
endif
endif
ROMFSDIR = $(ROOTDIR)/romfs
COMMON_SDKDIR = $(ROOTDIR)/../../common_SDK
ROMFSINST= romfs-inst.sh
SCRIPTSDIR = $(ROOTDIR)/config/scripts
TFTPDIR    = /tftpboot
UBOOTDIR    = $(ROOTDIR)/uboot
BUILD_START_STRING ?= $(shell date "+%a, %d %b %Y %T %z")
src_svnver=$(shell svn info .| awk '/^Last Changed Rev:/'|cut -d " " -f 4)
common_sdk_svn=$(shell svn info $(COMMON_SDKDIR) | awk '/^Last Changed Rev:/'|cut -d " " -f 4)
svnver=$(shell ( test $(src_svnver) -lt $(common_sdk_svn) && echo $(common_sdk_svn) ) || echo $(src_svnver))
export subtype=
###########################################################################
ifeq ($(CONFIG_DEFAULTS_GALAXYWIND_IPLUS001),y)
export	SYS_NAME=IPLUS001
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS001E),y)
export SYS_SUBTYPE=IPLUS001E
endif
endif

ifeq ($(CONFIG_DEFAULTS_GALAXYWIND_IPLUS003),y)
export	SYS_NAME=IPLUS003
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS003M),y)
export SYS_SUBTYPE=IPLUS003M
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS003H),y)
export SYS_SUBTYPE=IPLUS003H

endif
endif

ifeq ($(CONFIG_DEFAULTS_GALAXYWIND_IPLUS006),y)
export	SYS_NAME=IPLUS006
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS006),y)
export SYS_SUBTYPE=IPLUS006
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS006E),y)
export SYS_SUBTYPE=IPLUS006E
export subtype=iplus006e
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS006EX),y)
export SYS_SUBTYPE=IPLUS006EX
export subtype=iplus006ex
endif
endif

ifeq ($(CONFIG_DEFAULTS_GALAXYWIND_IPLUS008),y)
export	SYS_NAME=IPLUS008
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS008SL),y)
export SYS_SUBTYPE=IPLUS008SL
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS008SH),y)
export SYS_SUBTYPE=IPLUS008SH
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS008EL),y)
export SYS_SUBTYPE=IPLUS008EL
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS008EH),y)
export SYS_SUBTYPE=IPLUS008EH
endif
ifeq ($(CONFIG_PRODCUT_GALAXY_IPLUS008E),y)
export SYS_SUBTYPE=IPLUS008E
endif
endif


ifeq ($(LINUXDIR), linux-2.6.21.x)
HOST_NCPU := 1 
else 
HOST_NCPU := $(shell if [ -f /proc/cpuinfo ]; then n=`grep -c processor /proc/cpuinfo`; if [ $$n -gt 1 ];then expr $$n \* 2; else echo $$n; fi; else echo 1; fi)  
endif
#--

ifeq ($(SYS_NAME), IPLUS008)
ifeq ($(SYS_SUBTYPE),)
export SYS_SUBTYPE=IPLUS008SH
endif  
endif

ifeq ($(SYS_NAME), IPLUS003)
ifeq ($(SYS_SUBTYPE),)
export SYS_SUBTYPE=IPLUS003H
endif  
endif

ifeq ($(SYS_SUBTYPE),)
export SYS_SUBTYPE=$(SYS_NAME)
endif

LINUX_CONFIG  = $(ROOTDIR)/$(LINUXDIR)/.config
CONFIG_CONFIG = $(ROOTDIR)/config/.config
BUSYBOX_CONFIG = $(ROOTDIR)/user/busybox/.config
MODULES_CONFIG = $(ROOTDIR)/modules/.config


CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
	  else if [ -x /bin/bash ]; then echo /bin/bash; \
	  else echo sh; fi ; fi)

ifeq (config.arch,$(wildcard config.arch))
ifeq ($(filter %_default, $(MAKECMDGOALS)),)
ifneq ($(CONFIG_BUILD_TOOLCHAIN), y)
include config.arch
ARCH_CONFIG = $(ROOTDIR)/config.arch
export ARCH_CONFIG
endif
endif
endif

ifneq ($(SYSVER),)
CONFIG_PRODUCT_VERSION=$(SYSVER)
export SYS_VER=$(SYSVER)
else
VERSION_FILE=$(COMMON_SDKDIR)/mu/mu_version.h
CONFIG_PRODUCT_VERSION=$(shell $(ROOTDIR)/tools/get_ver.sh $(VERSION_FILE))
endif

ifneq ($(SYSLANG),)
export SYS_LANG=_$(SYSLANG)
export SYS_LANG_=$(SYSLANG)_
else
export SYS_LANG=
export SYS_LANG_=
endif

ifneq ($(OEM),)
export SYS_OEM=$(OEM)
export SYS_OEM_=P$(OEM)_
else
export SYS_OEM=
export SYS_OEM_=
endif

ifneq ($(HW),)
export SYS_HW=$(HW)
export SYS_HW_=H$(HW)_
else
export SYS_HW=
export SYS_HW_=
endif

export UPGRADE_FILE_DIR=$(IMAGEDIR)/upgrade
export UPGRADE_BIN_DIR=$(IMAGEDIR)/$(SYS_SUBTYPE)
export PLATFORM_FILE_DIR=$(ROOTDIR)/vendors/GALAXYWIND/$(SYS_SUBTYPE)
export UPGRADE_BIN=$(SYS_SUBTYPE)_UPGRADE_$(SYS_OEM_)$(SYS_HW_)$(SYS_LANG_)V$(CONFIG_PRODUCT_VERSION).$(svnver).bin
export UBOOT_BIN=$(SYS_SUBTYPE)_UBOOT_$(SYS_OEM_)$(SYS_HW_)$(SYS_LANG_)V$(CONFIG_PRODUCT_VERSION).$(svnver).bin
export SYSTEM_BIN=$(SYS_SUBTYPE)_FIRMWARE_$(SYS_OEM_)$(SYS_HW_)$(SYS_LANG_)V$(CONFIG_PRODUCT_VERSION).$(svnver).bin
export FLASHALL_BIN=$(SYS_SUBTYPE)_FLASHALL_$(SYS_OEM_)$(SYS_HW_)$(SYS_LANG_)V$(CONFIG_PRODUCT_VERSION).$(svnver).bin
export MD5FILE=$(SYS_SUBTYPE)_MD5FILE_$(SYS_OEM_)$(SYS_HW_)$(SYS_LANG_)V$(CONFIG_PRODUCT_VERSION).$(svnver).txt
export SVNVER=$(svnver)
# May use a different compiler for the kernel
KERNEL_CROSS_COMPILE ?= $(CROSS_COMPILE)
STRIP ?= $(CROSS_COMPILE)strip
ifneq ($(SUBARCH),)
# Using UML, so make the kernel and non-kernel with different ARCHs
MAKEARCH = $(MAKE) ARCH=$(SUBARCH) CROSS_COMPILE=$(CROSS_COMPILE)
MAKEARCH_KERNEL = $(MAKE) ARCH=$(ARCH) SUBARCH=$(SUBARCH) CROSS_COMPILE=$(KERNEL_CROSS_COMPILE)
else
MAKEARCH = $(MAKE) ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE)
MAKEARCH_KERNEL = $(MAKE)  ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_CROSS_COMPILE)
endif
DIRS    =  $(ROOTDIR)/vendors include uClibc++ user lib

export VENDOR PRODUCT ROOTDIR LINUXDIR HOSTCC CONFIG_SHELL EXT_LIB_DIR
export CONFIG_CONFIG BUSYBOX_CONFIG LINUX_CONFIG MODULES_CONFIG BUILDROOT_CONFIG ROMFSDIR SCRIPTSDIR
export VERSIONPKG VERSIONSTR ROMFSINST PATH IMAGEDIR RELFILES TFTPDIR
export BUILD_START_STRING
export HOST_NCPU
export CONFIG_PRODUCT_VERSION





.PHONY: ucfront
ucfront: tools/ucfront/*.c
	$(MAKE) -C tools/ucfront
	ln -sf $(ROOTDIR)/tools/ucfront/ucfront tools/ucfront-gcc
	ln -sf $(ROOTDIR)/tools/ucfront/ucfront tools/ucfront-g++
	ln -sf $(ROOTDIR)/tools/ucfront/ucfront-ld tools/ucfront-ld

.PHONY: cksum
cksum: tools/sg-cksum/*.c
	$(MAKE) -C tools/sg-cksum
	ln -sf $(ROOTDIR)/tools/sg-cksum/cksum tools/cksum

############################################################################

#
# Config stuff,  we recall ourselves to load the new config.arch before
# running the kernel and other config scripts
#

.PHONY: config.tk config.in

config.in:
	@chmod u+x config/mkconfig
	config/mkconfig > config.in

config.tk: config.in
	$(MAKE) -C $(SCRIPTSDIR) tkparse
	ARCH=dummy $(SCRIPTSDIR)/tkparse < config.in > config.tmp
	@if [ -f /usr/local/bin/wish ];	then \
		echo '#!'"/usr/local/bin/wish -f" > config.tk; \
	else \
		echo '#!'"/usr/bin/wish -f" > config.tk; \
	fi
	cat $(SCRIPTSDIR)/header.tk >> ./config.tk
	cat config.tmp >> config.tk
	rm -f config.tmp
	echo "set defaults \"/dev/null\"" >> config.tk
	echo "set help_file \"config/Configure.help\"" >> config.tk
	cat $(SCRIPTSDIR)/tail.tk >> config.tk
	chmod 755 config.tk

.PHONY: xconfig
xconfig: config.tk
	@wish -f config.tk
	@if [ ! -f .config ]; then \
		echo; \
		echo "You have not saved your config, please re-run make config"; \
		echo; \
		exit 1; \
	 fi
	@chmod u+x config/setconfig
	@config/setconfig defaults
	@if egrep "^CONFIG_BUILD_TOOLCHAIN=y" .config > /dev/null; then \
		$(MAKE) -C toolchain xconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_KERNEL=y" .config > /dev/null; then \
		$(MAKE) linux_xconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_MODULES=y" .config > /dev/null; then \
		$(MAKE) modules_xconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_VENDOR=y" .config > /dev/null; then \
		$(MAKE) config_xconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_BUSYBOX=y" .config > /dev/null; then \
		$(MAKE) -C user/busybox menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_UCLIBC=y" .config > /dev/null; then \
		$(MAKE) -C lib menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_UCLIBC_PLUS_PLUS=y" .config > /dev/null; then \
		$(MAKE) -C uClibc++ menuconfig; \
	 fi
	@config/setconfig final

.PHONY: config
config: config.in
	@HELP_FILE=config/Configure.help \
		$(CONFIG_SHELL) $(SCRIPTSDIR)/Configure config.in
	@chmod u+x config/setconfig
	@config/setconfig defaults
	@if egrep "^CONFIG_BUILD_TOOLCHAIN=y" .config > /dev/null; then \
		$(MAKE) -C toolchain config; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_KERNEL=y" .config > /dev/null; then \
		$(MAKE) linux_config; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_MODULES=y" .config > /dev/null; then \
		$(MAKE) modules_config; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_VENDOR=y" .config > /dev/null; then \
		$(MAKE) config_config; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_BUSYBOX=y" .config > /dev/null; then \
		$(MAKE) -C user/busybox menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_UCLIBC=y" .config > /dev/null; then \
		$(MAKE) -C lib menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_UCLIBC_PLUS_PLUS=y" .config > /dev/null; then \
		$(MAKE) -C uClibc++ menuconfig; \
	 fi
	@config/setconfig final

.PHONY: menuconfig
menuconfig: config.in
	$(MAKE) -C $(SCRIPTSDIR)/lxdialog all
	@HELP_FILE=config/Configure.help \
		$(CONFIG_SHELL) $(SCRIPTSDIR)/Menuconfig config.in
	@if [ ! -f .config ]; then \
		echo; \
		echo "You have not saved your config, please re-run make config"; \
		echo; \
		exit 1; \
	 fi
	@chmod u+x config/setconfig
	@config/setconfig defaults
	@if egrep "^CONFIG_BUILD_TOOLCHAIN=y" .config > /dev/null; then \
		$(MAKE) -C toolchain menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_KERNEL=y" .config > /dev/null; then \
		$(MAKE) linux_menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_MODULES=y" .config > /dev/null; then \
		$(MAKE) modules_menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_VENDOR=y" .config > /dev/null; then \
		$(MAKE) config_menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_BUSYBOX=y" .config > /dev/null; then \
		$(MAKE) -C user/busybox menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_UCLIBC=y" .config > /dev/null; then \
		$(MAKE) -C lib menuconfig; \
	 fi
	@if egrep "^CONFIG_DEFAULTS_UCLIBC_PLUS_PLUS=y" .config > /dev/null; then \
		$(MAKE) -C uClibc++ menuconfig; \
	 fi
	@config/setconfig final

.PHONY: oldconfig
oldconfig: config.in
	@HELP_FILE=config/Configure.help \
		$(CONFIG_SHELL) $(SCRIPTSDIR)/Configure -d config.in
	@chmod u+x config/setconfig
	@config/setconfig defaults
	@$(MAKE) oldconfig_linux
	@$(MAKE) oldconfig_modules
	@$(MAKE) oldconfig_config
	@chmod u+x config/setconfig
	@config/setconfig final

.PHONY: modules
modules:applib linux
	. $(LINUXDIR)/.config; if [ "$$CONFIG_MODULES" = "y" ]; then \
		[ -d $(LINUXDIR)/modules ] || mkdir $(LINUXDIR)/modules; \
		$(MAKEARCH_KERNEL) -C $(LINUXDIR) modules; \
	fi

.PHONY: modules_install
modules_install:
	. $(LINUXDIR)/.config; if [ "$$CONFIG_MODULES" = "y" ]; then \
		[ -d $(ROMFSDIR)/lib/modules ] || mkdir -p $(ROMFSDIR)/lib/modules; \
		$(MAKEARCH_KERNEL) -C $(LINUXDIR) INSTALL_MOD_PATH=$(ROMFSDIR) DEPMOD="../user/busybox/examples/depmod.pl" modules_install; \
		rm -f $(ROMFSDIR)/lib/modules/*/build; \
		rm -f $(ROMFSDIR)/lib/modules/*/source; \
		find $(ROMFSDIR)/lib/modules -type f -name "*o" | xargs -r $(STRIP) -R .comment -R .note -g --strip-unneeded; \
	fi

linux_xconfig:
	KCONFIG_NOTIMESTAMP=1 $(MAKEARCH_KERNEL) -C $(LINUXDIR) xconfig
linux_menuconfig:
	KCONFIG_NOTIMESTAMP=1 $(MAKEARCH_KERNEL) -C $(LINUXDIR) menuconfig
linux_config:
	KCONFIG_NOTIMESTAMP=1 $(MAKEARCH_KERNEL) -C $(LINUXDIR) config
modules_xconfig:
	[ ! -d modules ] || $(MAKEARCH) -C modules xconfig
modules_menuconfig:
	[ ! -d modules ] || $(MAKEARCH) -C modules menuconfig
modules_config:
	[ ! -d modules ] || $(MAKEARCH) -C modules config
modules_clean:
	-[ ! -d modules ] || $(MAKEARCH) -C modules clean
config_xconfig:
	$(MAKEARCH) -C config xconfig
config_menuconfig:
	$(MAKEARCH) -C config menuconfig
config_config:
	$(MAKEARCH) -C config config
oldconfig_config:
	$(MAKEARCH) -C config oldconfig
oldconfig_modules:
	[ ! -d modules ] || $(MAKEARCH) -C modules oldconfig
oldconfig_linux:
	KCONFIG_NOTIMESTAMP=1 $(MAKEARCH_KERNEL) -C $(LINUXDIR) oldconfig

############################################################################
#
# normal make targets
#



romfs_clean:
	sudo rm -rf romfs

.PHONY: romfs
romfs: romfs_clean common_www romfs.subdirs modules_install romfs.post

.PHONY: romfs.subdirs
romfs.subdirs:
	for dir in vendors $(DIRS) ; do [ ! -d $$dir ] || $(MAKEARCH) -C $$dir romfs || exit 1 ; done

.PHONY: romfs.post
romfs.post:
	#copy some special file
	sudo cp -arpdf $(ROOTDIR)/user/busybox/networking/udhcp/default.script $(ROMFSDIR)/usr/etc/dhcpc/
	rm -fr `find $(ROMFSDIR) -name ".svn"`
	rm -fr `find $(ROMFSDIR) -name "CVS"`
	$(MAKEARCH) -C vendors romfs.post
	-find $(ROMFSDIR)/. -name CVS | xargs -r rm -rf

.PHONY: image
image:
	[ -d $(ROOTDIR)/images ] || mkdir $($(ROOTDIR)/images)
	[ -d $(IMAGEDIR) ] || mkdir $(IMAGEDIR)
	$(MAKEARCH) -C vendors image

.PHONY: release
release:
	make -C release release

%_fullrelease:
	@echo "This target no longer works"
	@echo "Do a make -C release $@"
	exit 1
#
# fancy target that allows a vendor to have other top level
# make targets,  for example "make vendor_flash" will run the
# vendor_flash target in the vendors directory
#

vendor_%:
	$(MAKEARCH) -C vendors $@

.PHONY: toolchain
toolchain :
	@if egrep "^CONFIG_BUILD_TOOLCHAIN=y" .config > /dev/null; then \
		$(MAKE) -C toolchain || exit 1; \
	 else \
		@echo "Do not build toolchain." ; \
	 fi

.PHONY: kernel_headers_install
kernel_headers_install:
	$(MAKEARCH_KERNEL) -j$(HOST_NCPU) -C $(LINUXDIR) headers_install INSTALL_HDR_PATH=$(ROOTDIR)/$(LINUXDIR)/usr

.PHONY: uclibc_headers_install
uclibc_headers_install:
	$(MAKEARCH) -C lib install_headers

.PHONY: linux
linux linux%_only:applib
	@if [ $(LINUXDIR) = linux-2.4.x -a ! -f $(LINUXDIR)/.depend ] ; then \
		echo "ERROR: you need to do a 'make dep' first" ; \
		exit 1 ; \
	fi
	$(MAKEARCH_KERNEL) -j$(HOST_NCPU) -C $(LINUXDIR) $(LINUXTARGET) || exit 1
	if [ -f $(LINUXDIR)/vmlinux ]; then \
		ln -f $(LINUXDIR)/vmlinux $(LINUXDIR)/linux ; \
	fi

.PHONY: sparse
sparse:
	$(MAKEARCH_KERNEL) -C $(LINUXDIR) C=1 $(LINUXTARGET) || exit 1

.PHONY: sparseall
sparseall:
	$(MAKEARCH_KERNEL) -C $(LINUXDIR) C=2 $(LINUXTARGET) || exit 1

.PHONY: subdirs
subdirs: lib uClibc++ linux modules
	for dir in $(DIRS) ; do [ ! -d $$dir ] || $(MAKEARCH) -C $$dir || exit 1 ; done

dep:
	@if [ ! -f $(LINUXDIR)/.config ] ; then \
		echo "ERROR: you need to do a 'make config' first" ; \
		exit 1 ; \
	fi
	
	@if [ $(LINUXDIR) = linux-2.6.21.x ] ; then \
	$(MAKEARCH_KERNEL) -C $(LINUXDIR) prepare ; \
	fi
	
	@if [ $(LINUXDIR) = linux-2.6.36MT.x ] ; then \
	$(MAKEARCH_KERNEL) -C $(LINUXDIR) prepare ; \
	rm -fr $(LINUXDIR)/include/asm; \
	rm -fr $(LINUXDIR)/include/linux/autoconf.h; \
	rm -fr $(LINUXDIR)/arch/mips/include/asm/rt2880; \
	rm -fr $(LINUXDIR)/drivers/net/rt_rdm; \
	rm -fr $(LINUXDIR)/drivers/net/raeth; \
	rm -fr $(LINUXDIR)/drivers/char/i2c_drv.c; \
	rm -fr $(LINUXDIR)/drivers/char/i2c_drv.h; \
	rm -fr $(LINUXDIR)/net/nat/hw_nat; \
	rm -fr $(LINUXDIR)/drivers/char/gdma_test.c; \
	rm -fr $(LINUXDIR)/drivers/char/ralink_gdma.c; \
	rm -fr $(LINUXDIR)/drivers/char/ralink_gdma.h; \
	rm -fr $(LINUXDIR)/drivers/watchdog/ralink_wdt.c; \
	rm -fr $(LINUXDIR)/drivers/watchdog/ralink_wdt.h; \
	ln -sf ../arch/mips/include/asm $(LINUXDIR)/include/asm; \
	ln -sf ../../include/generated/autoconf.h $(LINUXDIR)/include/linux/autoconf.h; \
	ln -sf ./mach-ralink $(LINUXDIR)/arch/mips/include/asm/rt2880; \
	ln -sf ../../../linux-2.6.21.x/drivers/net/rt_rdm $(LINUXDIR)/drivers/net/rt_rdm; \
	ln -sf ../../../linux-2.6.21.x/drivers/net/raeth $(LINUXDIR)/drivers/net/raeth; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/i2c_drv.c $(LINUXDIR)/drivers/char/i2c_drv.c; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/i2c_drv.h $(LINUXDIR)/drivers/char/i2c_drv.h; \
	ln -sf ../../../linux-2.6.21.x/net/nat/hw_nat $(LINUXDIR)/net/nat/hw_nat; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/gdma_test.c $(LINUXDIR)/drivers/char/gdma_test.c; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/ralink_gdma.c $(LINUXDIR)/drivers/char/ralink_gdma.c; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/ralink_gdma.h $(LINUXDIR)/drivers/char/ralink_gdma.h; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/watchdog/ralink_wdt.c $(LINUXDIR)/drivers/watchdog/ralink_wdt.c; \
	ln -sf ../../../linux-2.6.21.x/drivers/char/watchdog/ralink_wdt.h $(LINUXDIR)/drivers/watchdog/ralink_wdt.h; \
	fi
	
	@if [ $(LINUXDIR) = linux-2.6.36.x ] ; then \
		$(MAKEARCH_KERNEL) -C $(LINUXDIR) prepare ; \
		rm -fr $(LINUXDIR)/include/asm; \
		rm -fr $(LINUXDIR)/arch/mips/include/asm/rt2880; \
		rm -fr $(LINUXDIR)/include/linux/autoconf.h; \
		rm -fr $(LINUXDIR)/drivers/usb/dwc_otg; \
		rm -fr $(LINUXDIR)/drivers/net/raeth; \
		rm -fr $(LINUXDIR)/drivers/net/rt_rdm; \
		rm -fr $(LINUXDIR)/drivers/char/ralink_gpio.c; \
		rm -fr $(LINUXDIR)/drivers/char/ralink_gpio.h; \
		rm -fr $(LINUXDIR)/drivers/char/ralink_gdma.c; \
		rm -fr $(LINUXDIR)/drivers/char/ralink_gdma.h; \
		rm -fr $(LINUXDIR)/drivers/char/i2c_drv.c; \
		rm -fr $(LINUXDIR)/drivers/char/i2c_drv.h; \
		rm -fr $(LINUXDIR)/drivers/char/spi_drv.c; \
		rm -fr $(LINUXDIR)/drivers/char/spi_drv.h; \
		rm -fr $(LINUXDIR)/drivers/char/pcm; \
		rm -fr $(LINUXDIR)/drivers/char/i2s; \
		rm -fr $(LINUXDIR)/drivers/char/vtss.h; \
		rm -fr $(LINUXDIR)/drivers/watchdog/ralink_wdt.c \
		rm -fr $(LINUXDIR)/drivers/watchdog/ralink_wdt.h \
		rm -fr $(LINUXDIR)/drivers/net/wireless/rt2860v2; \
		rm -fr $(LINUXDIR)/net/nat/hw_nat; \
		ln -sf ../arch/mips/include/asm $(LINUXDIR)/include/asm; \
		ln -sf ./mach-ralink $(LINUXDIR)/arch/mips/include/asm/rt2880; \
		ln -sf ../../include/generated/autoconf.h $(LINUXDIR)/include/linux/autoconf.h; \
		ln -sf ../../../linux-2.6.21.x/drivers/usb/dwc_otg $(LINUXDIR)/drivers/usb/dwc_otg; \
		ln -sf ../../../linux-2.6.21.x/drivers/net/raeth $(LINUXDIR)/drivers/net/raeth; \
		ln -sf ../../../linux-2.6.21.x/drivers/net/rt_rdm $(LINUXDIR)/drivers/net/rt_rdm; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/ralink_gpio.c $(LINUXDIR)/drivers/char/ralink_gpio.c; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/ralink_gpio.h $(LINUXDIR)/drivers/char/ralink_gpio.h; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/ralink_gdma.c $(LINUXDIR)/drivers/char/ralink_gdma.c; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/ralink_gdma.h $(LINUXDIR)/drivers/char/ralink_gdma.h; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/i2c_drv.c $(LINUXDIR)/drivers/char/i2c_drv.c; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/i2c_drv.h $(LINUXDIR)/drivers/char/i2c_drv.h; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/spi_drv.c $(LINUXDIR)/drivers/char/spi_drv.c; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/spi_drv.h $(LINUXDIR)/drivers/char/spi_drv.h; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/pcm $(LINUXDIR)/drivers/char/pcm; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/i2s $(LINUXDIR)/drivers/char/i2s; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/vtss.h $(LINUXDIR)/drivers/char/vtss.h; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/watchdog/ralink_wdt.c $(LINUXDIR)/drivers/watchdog/ralink_wdt.c; \
		ln -sf ../../../linux-2.6.21.x/drivers/char/watchdog/ralink_wdt.h $(LINUXDIR)/drivers/watchdog/ralink_wdt.h; \
		ln -sf ../../../../linux-2.6.21.x/drivers/net/wireless/rt2860v2 $(LINUXDIR)/drivers/net/wireless/rt2860v2; \
		ln -sf ../../../linux-2.6.21.x/net/nat/hw_nat $(LINUXDIR)/net/nat/hw_nat; \
	fi

	$(MAKEARCH_KERNEL) -C $(LINUXDIR) dep

# This one removes all executables from the tree and forces their relinking
.PHONY: relink
relink:
	find user prop vendors -type f -name '*.gdb' | sed 's/^\(.*\)\.gdb/\1 \1.gdb/' | xargs rm -f

clean: modules_clean
	@if egrep "^CONFIG_BUILD_TOOLCHAIN=y" .config > /dev/null; then \
		$(MAKE) -C toolchain clean ; \
	 else \
	(for dir in $(LINUXDIR) $(DIRS); do [ ! -d $$dir ] || $(MAKEARCH) -C $$dir clean ; done ;\
	rm -rf $(ROMFSDIR)/* ; \
	rm -rf $(IMAGEDIR)/* ; \
	rm -f config.tk ; \
	rm -rf $(ROOTDIR)/lib_dev ; \
	rm -f $(LINUXDIR)/linux ; \
	rm -rf $(LINUXDIR)/net/ipsec/alg/libaes $(LINUXDIR)/net/ipsec/alg/perlasm ; \
	rm -f $(LINUXDIR)/arch/mips/ramdisk/*.gz ) \
	fi

real_clean mrproper: clean
	-$(MAKEARCH_KERNEL) -C $(LINUXDIR) mrproper
	-$(MAKEARCH) -C config clean
	sudo rm -rf romfs config.in config.arch config.tk images
	rm -f modules/config.tk
	rm -rf .config .config.old .oldconfig autoconf.h
	rm -f user/busybox/.config

distclean: mrproper
	-$(MAKE) -C toolchain distclean
	-$(MAKE) -C lib distclean
	-$(MAKEARCH_KERNEL) -C $(LINUXDIR) distclean
	-rm -f user/tinylogin/applet_source_list user/tinylogin/config.h

applib:
	$(MAKEARCH) -C user/ai_data
jpeg:
	$(MAKEARCH) -C user/jpeg-6b
camera:
	$(MAKEARCH) -C user/mjpg-streamer-r63
gnet:
	$(MAKEARCH) -C user/gnet_kernel
h264:
	$(MAKEARCH) -C user/h264_kernel
h264_clean:
	$(MAKEARCH) -C user/h264_kernel clean
ai_kernel:
	$(MAKEARCH) -C user/ai_kernel
mu:
	$(MAKEARCH) -C  user/mu
rt2880:
	$(MAKEARCH) -C user/rt2880_app
loop_chk:
	$(MAKEARCH) -C user/loop_chk
loop_chk_clean:
	$(MAKEARCH) -C user/loop_chk clean
alsa:
	$(MAKEARCH) -C user/alsa_lib
ffmpeg:
	$(MAKEARCH) -C user/ffmpeg
pppd:
	$(MAKEARCH) -C user/ppp-2.4.5
pppd_clean:
	$(MAKEARCH) -C user/ppp-2.4.5 clean
busybox:
	$(MAKEARCH) -C user/busybox
remote_kernel:
	$(MAKEARCH) -C user/remote_kernel

common_www:
	rm -rf $(ROMFSDIR)/www
	mkdir -p $(ROMFSDIR)
	cp -arpdf $(COMMON_SDKDIR)/www$(SYS_LANG) $(ROMFSDIR)/www
	mv $(ROMFSDIR)/www/svnnum $(ROMFSDIR)/www/$(svnver)
	echo "var svnversion=\"$(svnver)\";"  > $(ROMFSDIR)/www/versiondef.js
	echo "var deviceInfo=\"$(SYS_SUBTYPE)\";" >>$(ROMFSDIR)/www/versiondef.js
	echo "var subtype_at_run=\"\";" >>$(ROMFSDIR)/www/versiondef.js
	$(COMMON_SDKDIR)/tools/yuicompress.sh $(ROMFSDIR)/www

%_only:
	@case "$(@)" in \
	*/*) d=`expr $(@) : '\([^/]*\)/.*'`; \
	     t=`expr $(@) : '[^/]*/\(.*\)'`; \
	     $(MAKEARCH) -C $$d $$t;; \
	*)   $(MAKEARCH) -C $(@:_only=);; \
	esac

%_clean:
	@case "$(@)" in \
	*/*) d=`expr $(@) : '\([^/]*\)/.*'`; \
	     t=`expr $(@) : '[^/]*/\(.*\)'`; \
	     $(MAKEARCH) -C $$d $$t;; \
	*)   $(MAKEARCH) -C $(@:_clean=) clean;; \
	esac

%_default:
	@if [ ! -f "vendors/$(@:_default=)/config.device" ]; then \
		echo "vendors/$(@:_default=)/config.device must exist first"; \
		exit 1; \
	 fi
	-make clean > /dev/null 2>&1
	cp vendors/$(@:_default=)/config.device .config
	chmod u+x config/setconfig
	yes "" | config/setconfig defaults
	config/setconfig final
	make dep
	make

config_error:
	@echo "*************************************************"
	@echo "You have not run make config."
	@echo "The build sequence for this source tree is:"
	@echo "1. 'make config' or 'make xconfig'"
	@echo "2. 'make dep'"
	@echo "3. 'make'"
	@echo "*************************************************"
	@exit 1

prune: ucfront
	@for i in `ls -d linux-* | grep -v $(LINUXDIR)`; do \
		rm -fr $$i; \
	done
#$(MAKE) -C lib prune
	$(MAKE) -C uClib prune
	$(MAKE) -C user prune
	$(MAKE) -C vendors prune

dist-prep:
	-find $(ROOTDIR) -name 'Makefile*.bin' | while read t; do \
		$(MAKEARCH) -C `dirname $$t` -f `basename $$t` $@; \
	 done


upgrade:
	$(SUDO) rm -rf $(IMAGEDIR)/upgrade/*
	$(SUDO) rm -rf $(IMAGEDIR)/$(SYS_SUBTYPE)/*

	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)
	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/etc
	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/bin
	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/lib/modules
	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/userfs/bin
	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/usr/bin
	$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/usr/sbin

	$(SUDO) mkdir -p $(UPGRADE_BIN_DIR)
	
	$(SUDO) cp -arpdf $(ROMFSDIR)/bin/tools $(UPGRADE_FILE_DIR)/bin/tools
	$(SUDO) cp -arpdf $(ROMFSDIR)/www $(UPGRADE_FILE_DIR)/www
	$(COMMON_SDKDIR)/tools/yuicompress.sh $(UPGRADE_FILE_DIR)/www 

	if [ -f $(ROMFSDIR)/usr/etc/lang.ini ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/lang.ini $(UPGRADE_FILE_DIR)/etc/lang.ini; \
	fi

	if [ -f $(ROMFSDIR)/bin/upnpc-static ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/bin/upnpc-static $(UPGRADE_FILE_DIR)/bin/upnpc-static; \
	fi
ifneq ($(SYS_SUBTYPE),$(filter IPLUS008SL IPLUS008EL,$(SYS_SUBTYPE)))

	if [ -f $(ROMFSDIR)/bin/mjpg_streamer ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/bin/mjpg_streamer $(UPGRADE_FILE_DIR)/bin/mjpg_streamer; \
	fi 
	if [ -f $(ROMFSDIR)/usr/etc/.app_version ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/.app_version $(UPGRADE_FILE_DIR)/etc/.app_version; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/app_game.ini ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/app_game.ini $(UPGRADE_FILE_DIR)/etc/app_game.ini; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/app.dat ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/app.dat $(UPGRADE_FILE_DIR)/etc/app.dat; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/qq.ini ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/qq.ini $(UPGRADE_FILE_DIR)/etc/qq.ini; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/other.ini ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/other.ini $(UPGRADE_FILE_DIR)/etc/other.ini; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/group_name.ini ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/group_name.ini $(UPGRADE_FILE_DIR)/etc/group_name.ini; \
	fi
	
	if [ -f $(ROMFSDIR)/usr/etc/other.txt ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/other.txt $(UPGRADE_FILE_DIR)/etc/other.txt; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/study.txt ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/study.txt $(UPGRADE_FILE_DIR)/etc/study.txt; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/play.txt ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/play.txt $(UPGRADE_FILE_DIR)/etc/play.txt; \
	fi
	if [ -f $(ROMFSDIR)/usr/etc/cgi_remote_ctr_devtype.txt ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/etc/cgi_remote_ctr_devtype.txt $(UPGRADE_FILE_DIR)/etc/cgi_remote_ctr_devtype.txt; \
	fi
	
	if [ -f $(ROMFSDIR)/lib/input_uvc.so ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/input_uvc.so $(UPGRADE_FILE_DIR)/lib/.; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/output_http.so $(UPGRADE_FILE_DIR)/lib/.; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/output_udp.so $(UPGRADE_FILE_DIR)/lib/.; \
	fi
	$(SUDO) cp -arpdf $(ROMFSDIR)/usr/bin/wifi $(UPGRADE_FILE_DIR)/usr/bin/

	if [ -f $(ROMFSDIR)/usr/bin/pppd ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/bin/pppd $(UPGRADE_FILE_DIR)/usr/bin/; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/usr/bin/pppoe-discovery $(UPGRADE_FILE_DIR)/usr/bin/; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/libpppoe.so $(UPGRADE_FILE_DIR)/lib/libpppoe.so; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/libpppoatm.so $(UPGRADE_FILE_DIR)/lib/libpppoatm.so; \
	fi
	
	if [ -f $(ROMFSDIR)/lib/modules/ai.ko ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/modules/ai.ko $(UPGRADE_FILE_DIR)/lib/modules/ai.ko; \
	fi
	if [ -f $(ROMFSDIR)/lib/modules/gnet.ko ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/modules/gnet.ko $(UPGRADE_FILE_DIR)/lib/modules/gnet.ko; \
	fi
	if [ -f $(ROMFSDIR)/lib/modules/attack_guard.ko ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/modules/attack_guard.ko $(UPGRADE_FILE_DIR)/lib/modules/attack_guard.ko; \
	fi
	if [ -f $(ROMFSDIR)/lib/modules/remote.ko ]; then \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/modules/remote.ko $(UPGRADE_FILE_DIR)/lib/modules/remote.ko; \
	fi
	if [ -f $(ROMFSDIR)/lib/modules/2.6.21/kernel/drivers/char/ralink_gpio.ko ]; then \
		$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/lib/modules/2.6.21/kernel/drivers/char/; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/modules/2.6.21/kernel/drivers/char/ralink_gpio.ko $(UPGRADE_FILE_DIR)/lib/modules/2.6.21/kernel/drivers/char/ralink_gpio.ko; \
	fi
	if [ -f $(ROMFSDIR)/lib/modules/2.6.21/kernel/drivers/char/i2s/ralink_i2s.ko ]; then \
		$(SUDO) mkdir -p $(UPGRADE_FILE_DIR)/lib/modules/2.6.21/kernel/drivers/char/i2s/; \
		$(SUDO) cp -arpdf $(ROMFSDIR)/lib/modules/2.6.21/kernel/drivers/char/i2s/ralink_i2s.ko $(UPGRADE_FILE_DIR)/lib/modules/2.6.21/kernel/drivers/char/i2s/ralink_i2s.ko; \
	fi
endif
ifeq ($(SYS_SUBTYPE),$(filter IPLUS008SL IPLUS008EL,$(SYS_SUBTYPE)))
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/lib
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/userfs
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/usr
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/page/green
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/green
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/page/iTV
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/iTV
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/page/auth
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/auth
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/adult.jpg
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/auth.jpg
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/children.jpg
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/netwayback6.png
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/netwayback7.png
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/noclose.gif
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/noclosea.gif
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/image/deviceControl.jpg
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/video
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/page/video
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/socket/socketSta.js
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/page/socket/socketSta.html
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/page/smarthome/controlDevice.html
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/smarthome/controlDevice.js
	$(SUDO) rm -rf $(UPGRADE_FILE_DIR)/www/$(svnver)/js/system/systemStateB.js

endif

	$(SUDO) $(CONFIG_CROSS_COMPILER_PATH)/mksquashfs_lzma-3.2 $(UPGRADE_FILE_DIR) $(UPGRADE_BIN_DIR)/upgrade.bin -le -noappend -no-fragments 
	$(SUDO) md5sum $(UPGRADE_BIN_DIR)/upgrade.bin > $(UPGRADE_BIN_DIR)/info.txt
	$(SUDO) echo $(CONFIG_PRODUCT_VERSION) >> $(UPGRADE_BIN_DIR)/info.txt
	$(SUDO) rm -f $(IMAGEDIR)/$(UPGRADE_BIN)
	cd $(UPGRADE_BIN_DIR) && $(SUDO) tar -zcvf $(IMAGEDIR)/$(UPGRADE_BIN) *

ifeq ($(SYS_SUBTYPE),$(filter IPLUS008SL IPLUS008EL,$(SYS_SUBTYPE)))
	@USER_CONF_SIZE=`printf "%d" 0xd0000` && echo "userconfsize=$$USER_CONF_SIZE" && \
       	WC_UPGRADE_SIZE=`wc -c $(UPGRADE_BIN_DIR)/* |grep total| awk '{ print $$1 }'` && \
       	echo "wc my userconfig size: $$WC_UPGRADE_SIZE" && \
       	ALT=`expr $$USER_CONF_SIZE - $$WC_UPGRADE_SIZE - 100000` && echo "alt_space =$$ALT" ; \
       	test $$ALT -lt 0 && echo " ==== ERROR upgrade is too lager =====" && echo "" && exit -1 ; \
       	echo "----------------- check upgrade size ok -----------------------" 
endif
	@echo "upgrade all packets"

Uboot:
	cp -arpdf $(UBOOTDIR)/uboot_$(SYS_NAME)v1.img $(IMAGEDIR)/$(UBOOT_BIN)
	echo "uboot cp ok"

flashall:
	cd $(UBOOTDIR); \
	./$(SYS_NAME)_mkallflash $(IMAGEDIR)/$(SYSTEM_BIN) $(FLASHALL_BIN) && mv -f $(FLASHALL_BIN) $(IMAGEDIR)/$(FLASHALL_BIN); \
	cd -

#md5file: bootbase buildimage upgrade
md5file:
	printf "File\t\t\tVersion\tSvnnum\tCompile_Date\t\tSize\t\tMd5str\n" > $(IMAGEDIR)/$(MD5FILE)
	if test -e $(IMAGEDIR)/$(FLASHALL_BIN); \
	then \
		 printf "$(FLASHALL_BIN)\t$(VERSION)\t\t$(svnver)\t`date "+%Y-%m-%d %H:%M"`\t`du -b $(IMAGEDIR)/$(FLASHALL_BIN)|awk '{print $$1}'`\t`md5sum $(IMAGEDIR)/$(FLASHALL_BIN)|awk '{print $$1}'`\n" >> $(IMAGEDIR)/$(MD5FILE); \
	fi
	if test -e $(IMAGEDIR)/$(SYSTEM_BIN); \
	then \
		 printf "$(SYSTEM_BIN)\t$(VERSION)\t\t$(svnver)\t`date "+%Y-%m-%d %H:%M"`\t`du -b $(IMAGEDIR)/$(SYSTEM_BIN)|awk '{print $$1}'`\t`md5sum $(IMAGEDIR)/$(SYSTEM_BIN)|awk '{print $$1}'`\n" >> $(IMAGEDIR)/$(MD5FILE); \
	fi
	if test -e $(IMAGEDIR)/$(UBOOT_BIN); \
	then \
		 printf "$(UBOOT_BIN)\t$(VERSION)\t\t$(svnver)\t`date "+%Y-%m-%d %H:%M"`\t`du -b $(IMAGEDIR)/$(UBOOT_BIN)|awk '{print $$1}'`\t\t`md5sum $(IMAGEDIR)/$(UBOOT_BIN)|awk '{print $$1}'`\n" >> $(IMAGEDIR)/$(MD5FILE); \
	fi
	if test -e $(IMAGEDIR)/$(UPGRADE_BIN); \
	then \
		 printf "$(UPGRADE_BIN)\t$(VERSION)\t\t$(svnver)\t`date "+%Y-%m-%d %H:%M"`\t`du -b $(IMAGEDIR)/$(UPGRADE_BIN)|awk '{print $$1}'`\t`md5sum $(IMAGEDIR)/$(UPGRADE_BIN)|awk '{print $$1}'`\n" >> $(IMAGEDIR)/$(MD5FILE); \
	fi
	$(SUDO) $(ROOTDIR)/tools/unix2dos $(IMAGEDIR)/$(MD5FILE)
############################################################################
